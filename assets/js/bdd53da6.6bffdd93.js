"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[404],{197:e=>{e.exports=JSON.parse('{"functions":[],"properties":[],"types":[{"name":"List<T>","desc":"Represents a simple ordered array of items, essentially an alias of {[number]:T} (or {T}).\\r","lua_type":"{[number]:T }","source":{"line":10,"path":"src/ServerScriptService/Services/TowerLoaderService/Types.luau"}},{"name":"Dictionary<T>","desc":"Same as `List<T>`, but uses `string` indexes instead of `number` indexes.\\r","lua_type":"{[string]:T}","source":{"line":15,"path":"src/ServerScriptService/Services/TowerLoaderService/Types.luau"}},{"name":"PlayerInfo","desc":"","fields":[{"name":"Player","lua_type":"Player","desc":"A reference to the actual player instance in the **Players** service that this **PlayerInfo** is related to."},{"name":"GameTimer","lua_type":"number","desc":"In seconds, how long the player has been in the game. This value is floored and sent to the leaderboard every second for the **\u201cTime\u201d** statistic."},{"name":"LastRestart","lua_type":"number","desc":"How many seconds has passed since the player has last restarted a tower. This property is necessary for making sure they can\u2019t lag out the server by imposing a cool-down. This cool-down duration can be changed in the game config via the **RestartCooldown**."},{"name":"CurrentTower","lua_type":"string","desc":"The ID of the tower the player is currently playing. If the player is not in a tower, this value will be blank."},{"name":"CurrentTowerCheckpoint","lua_type":"number","desc":"The index of the checkpoint the player is currently assigned to touch. Every time the appropriate checkpoint is touched, this value increments. If the referenced checkpoint does not exist, no checkpoint checks are done. If a player equips any debug items, this value is set to *math.huge*."},{"name":"BoostItemsUsed","lua_type":"boolean","desc":"Tracks whether or not a boost item has been used in a tower or tower rush. Whenever a player loads in a tower, this value is reset to false, but the moment they equip a boost item, this value is set to true."},{"name":"TowerTimer","lua_type":"number","desc":"In seconds, how long the player has been in a tower or tower rush. This value does not increment if the **CurrentTower** is blank; In other words, not currently in a tower. Although the client also keeps time for the same reason on it\u2019s own, this value is sent to the client every 2 seconds to prevent the client\u2019s timer from desynchronizing with the server\u2019s timer."},{"name":"CurrentTowerRush","lua_type":"string","desc":"The ID of the tower rush the player is currently playing. If the player is not in a tower rush, this value will be blank. This value should ideally only be set if **CurrentTower** is also set."},{"name":"CurrentTowerRushIndex","lua_type":"number","desc":"The index of the current tower the player is at in the tower rush."},{"name":"TouchEventBusy","lua_type":"boolean","desc":"This boolean is used internally by various callbacks as a debounce for touch events."},{"name":"IsLoadingTower","lua_type":"boolean","desc":"This boolean is used as a debounce for tower loading. This property is set to true when a tower begins loading and reverts to false when it is finished. The loading of a tower cannot be initialized while this property is true."},{"name":"HasEverpresentCOs","lua_type":"boolean","desc":"This boolean is used to determine if the player has already been sent ever-present client objects. If this value is true, the client\u2019s requests for ever-present COs will be rejected to prevent malicious users from lagging out the server."}],"source":{"line":33,"path":"src/ServerScriptService/Services/TowerLoaderService/Types.luau"}}],"name":"Types","desc":"MTK makes extensive use of Luau\u2019s type definitions to organize data, many of which act as data structures for various types of objects. This section of the document focuses on documenting every property of these structures; As well as describing other types that may be present in the scripts.\\nAlmost every custom type used by MTK can be found in `MultiTowerServer.Types`. Furthermore, because of how extensively MTK makes use of type annotations, it is recommended that you at least have a basic understanding of Roblox Luau type annotating","source":{"line":6,"path":"src/ServerScriptService/Services/TowerLoaderService/Types.luau"}}')}}]);