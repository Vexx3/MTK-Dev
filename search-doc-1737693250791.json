{"searchDocs":[{"title":"Introduction","type":0,"sectionRef":"#","url":"/MTK-Dev/docs/intro","content":"Introduction The Multi-Tower Kit (MTK) is a kit that lets you combine multiple Juke's Towers of Hell (JToH)-styled towers (or any obby made with the JToH Tower Creation Kit) into a single place, in a way that closely resembles a single realm from JToH itself. It uses a batteries-included approach, being distributed as a single place file with scripts and various components of the kit already set up. All you need to do is add the towers and portals, build the lobby, and customize anything else as you seem fit. After that, the place will be fully functional.","keywords":"","version":"Next"},{"title":"Using the Kit","type":0,"sectionRef":"#","url":"/MTK-Dev/docs/UsingTheKit","content":"","keywords":"","version":"Next"},{"title":"Adding a tower​","type":1,"pageTitle":"Using the Kit","url":"/MTK-Dev/docs/UsingTheKit#adding-a-tower","content":" Adding a tower is at the core of this kit, It's pretty much the whole reason one would use this kit. To add a tower, start by inserting a tower, or even a blank kit, into the workspace. After it is inserted, move it into the Towers folder.  Rename the tower to the acronym of the tower; Be reasonable, as it's acronym will be used as the tower's internal identifier, and will be shown next to the timer on the client's GUI.  The tower should be organized the same way any tower is normally organized. The kit folder should contain:  The Obby folder which contains all of the normal, static parts. Most of which make up the gameplay of the tower.The Frame folder/model, which contains the parts that make up the frame of the tower. This functionally is exactly the same as the obby folder, but a distinction will be important in the future, as I plan on adding a low-detail mode1 to the kit in the future.The ClientSidedObjects folder contains all of the client objects for the tower. When the game loads, every tower’s ClientSidedObjects folder is moved into storage (game.ServerStorage.TowerClientObjects), and is served to a client whenever they load a tower. Optionally, you may move this folder to the TowerClientObjects folder yourself in studio, just as long as the folder is renamed to be the same as the tower’s acronym.The folder itself is optional too, the kit will function if this folder is removed completely, making it a true “purist”2 tower.    In this image, an example tower is shown appropriately inserted into the Towers folder. Because this tower is called &quot;Example Tower 1&quot;, the folder is named after it's acronym, &quot;ET1&quot;.    Footnotes​ Low-Detail Mode (LDM) is a feature in Juke’s Towers of Hell where the Obby folder’s contents of every tower are hidden, unless that tower is being played. However, the frame folder will be left untouched. The point of this feature is to put less stress on lower-end devices by having less things onscreen for the device to render. ↩ Although sometimes the definition is stretched to allow for purely cosmetic client objects, the MTK defines “purist” towers as having no client objects at all. ↩ ","version":"Next","tagName":"h2"},{"title":"MultiTowerServer","type":0,"sectionRef":"#","url":"/MTK-Dev/api/MultiTowerServer","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"MultiTowerServer","url":"/MTK-Dev/api/MultiTowerServer#functions","content":" ","version":null,"tagName":"h2"},{"title":"PlayerLoadTower​","type":1,"pageTitle":"MultiTowerServer","url":"/MTK-Dev/api/MultiTowerServer#PlayerLoadTower","content":"This item only works when running on the server. Server &lt;/&gt; MultiTowerServer.PlayerLoadTower( playerName: string, towerName: string, resetTimer: boolean ) → () Loads a tower by loading the COs, teleporting the player to the tower, and resetting their timer if needed ","version":null,"tagName":"h3"},{"title":"Types","type":0,"sectionRef":"#","url":"/MTK-Dev/api/Types","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Types","url":"/MTK-Dev/api/Types#types","content":" ","version":null,"tagName":"h2"},{"title":"List<T>​","type":1,"pageTitle":"Types","url":"/MTK-Dev/api/Types#List<T>","content":"&lt;/&gt; type List&lt;T&gt; = {[number]:T} Represents a simple ordered array of items, essentially an alias of {[number]:T} (or {T}).  ","version":null,"tagName":"h3"},{"title":"Dictionary<T>​","type":1,"pageTitle":"Types","url":"/MTK-Dev/api/Types#Dictionary<T>","content":"&lt;/&gt; type Dictionary&lt;T&gt; = {[string]:T} Same as List&lt;T&gt;, but uses string indexes instead of number indexes.  ","version":null,"tagName":"h3"},{"title":"PlayerInfo​","type":1,"pageTitle":"Types","url":"/MTK-Dev/api/Types#PlayerInfo","content":"&lt;/&gt; interface PlayerInfo { Player: Player -- A reference to the actual player instance in the Players service that this PlayerInfo is related to. GameTimer: number-- In seconds, how long the player has been in the game. This value is floored and sent to the leaderboard every second for the “Time” statistic. LastRestart: number-- How many seconds has passed since the player has last restarted a tower. This property is necessary for making sure they can’t lag out the server by imposing a cool-down. This cool-down duration can be changed in the game config via the RestartCooldown. CurrentTower: string-- The ID of the tower the player is currently playing. If the player is not in a tower, this value will be blank. CurrentTowerCheckpoint: number-- The index of the checkpoint the player is currently assigned to touch. Every time the appropriate checkpoint is touched, this value increments. If the referenced checkpoint does not exist, no checkpoint checks are done. If a player equips any debug items, this value is set to math.huge. BoostItemsUsed: boolean-- Tracks whether or not a boost item has been used in a tower or tower rush. Whenever a player loads in a tower, this value is reset to false, but the moment they equip a boost item, this value is set to true. TowerTimer: number-- In seconds, how long the player has been in a tower or tower rush. This value does not increment if the CurrentTower is blank; In other words, not currently in a tower. Although the client also keeps time for the same reason on it’s own, this value is sent to the client every 2 seconds to prevent the client’s timer from desynchronizing with the server’s timer. CurrentTowerRush: string-- The ID of the tower rush the player is currently playing. If the player is not in a tower rush, this value will be blank. This value should ideally only be set if CurrentTower is also set. CurrentTowerRushIndex: number-- The index of the current tower the player is at in the tower rush. TouchEventBusy: boolean-- This boolean is used internally by various callbacks as a debounce for touch events. IsLoadingTower: boolean-- This boolean is used as a debounce for tower loading. This property is set to true when a tower begins loading and reverts to false when it is finished. The loading of a tower cannot be initialized while this property is true. HasEverpresentCOs: boolean-- This boolean is used to determine if the player has already been sent ever-present client objects. If this value is true, the client’s requests for ever-present COs will be rejected to prevent malicious users from lagging out the server. }  ","version":null,"tagName":"h3"}],"options":{"id":"default"}}